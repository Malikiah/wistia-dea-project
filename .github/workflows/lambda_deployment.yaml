name: Deploy Wistia Extractor Lambda

on:
  push:
    branches:
      - main

env:
  WISTIA_API_KEY: ${{ secrets.WISTIA_API_KEY }}

  LAMBDA_FUNCTION_NAME: wistia-api-pull
  AWS_REGION: us-east-1
  S3_DEPLOYMENT_BUCKET: wistia-dea-project #
  AWS_ROLE: arn:aws:iam::918346807626:role/github-actions-lambda

  LAMBDA_EXECUTION_ROLE: arn:aws:iam::918346807626:role/service-role/wisita-api-pull-role-ympahjkx
  LAMBDA_HANDLER: lambda_function.lambda_handler
  LAMBDA_RUNTIME: python3.9
  LAMBDA_TIMEOUT: 30
  LAMBDA_MEMORY: 128

  SCHEDULE_CRON: 'cron(0 5 * * ? *)'
  EVENTBRIDGE_RULE_NAME: WistiaPullScheduleRule

jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write  # Required to request an OIDC token
      contents: read
    steps:
      - name: Checkout repository code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{env.AWS_ROLE}}
          aws-region: ${{ env.AWS_REGION }}

      # Setup Python Environment
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9' # Ensure this matches your Lambda runtime

      - name: Make package script executable
        run: chmod +x .github/scripts/create_package.sh
      - name: Execute packaging script
        run: ./.github/scripts/create_package.sh

      # Upload Package to S3 (Staging)
      - name: Upload deployment package to S3
        run: |
          aws s3 cp wistia_lambda_package.zip s3://${{ env.S3_DEPLOYMENT_BUCKET }}/wistia_lambda_package.zip

      # Deploy to AWS Lambda
      - name: Deploy Lambda function (Using S3 Artifact)
        run: |
          FUNCTION_EXISTS=$(aws lambda get-function \
            --function-name ${{ env.LAMBDA_FUNCTION_NAME }} \
            --region ${{ env.AWS_REGION }} > /dev/null 2>&1 && echo 0 || echo 1)

          # Define the ENVIRONMENT variable parameter string
          ENVIRONMENT_VARS="Variables={WISTIA_API_KEY=${{ env.WISTIA_API_KEY }}}"

          if [ "${FUNCTION_EXISTS}" -eq 0 ]; then
            echo "Function ${{ env.LAMBDA_FUNCTION_NAME }} exists. Running update..."
            
            # --- UPDATE FUNCTION CODE & CONFIGURATION ---
            aws lambda update-function-code \
              --function-name ${{ env.LAMBDA_FUNCTION_NAME }} \
              --s3-bucket ${{ env.S3_DEPLOYMENT_BUCKET }} \
              --s3-key wistia_lambda_package.zip \
              --region ${{ env.AWS_REGION }}

            echo "Waiting for code update to complete before modifying configuration..."
            aws lambda wait function-updated \
              --function-name ${{ env.LAMBDA_FUNCTION_NAME }} \
              --region ${{ env.AWS_REGION }}

            # Update Configuration (important if runtime, memory, or role changes)
            aws lambda update-function-configuration \
              --function-name ${{ env.LAMBDA_FUNCTION_NAME }} \
              --runtime ${{ env.LAMBDA_RUNTIME }} \
              --role ${{ env.LAMBDA_EXECUTION_ROLE }} \
              --handler ${{ env.LAMBDA_HANDLER }} \
              --timeout ${{ env.LAMBDA_TIMEOUT }} \
              --memory-size ${{ env.LAMBDA_MEMORY }} \
              --environment "$ENVIRONMENT_VARS" \
              --region ${{ env.AWS_REGION }}
            
          else
            echo "Function ${{ env.LAMBDA_FUNCTION_NAME }} does not exist. Running create..."
            
            # --- CREATE FUNCTION --
            aws lambda create-function \
              --function-name ${{ env.LAMBDA_FUNCTION_NAME }} \
              --runtime ${{ env.LAMBDA_RUNTIME }} \
              --role ${{ env.LAMBDA_EXECUTION_ROLE }} \
              --handler ${{ env.LAMBDA_HANDLER }} \
              --timeout ${{ env.LAMBDA_TIMEOUT }} \
              --memory-size ${{ env.LAMBDA_MEMORY }} \
              --code S3Bucket=${{ env.S3_DEPLOYMENT_BUCKET }},S3Key=wistia_lambda_package.zip \
              --environment "$ENVIRONMENT_VARS" \
              --region ${{ env.AWS_REGION }}
          fi
      # Configure EventBridge Schedule
      - name: Configure daily EventBridge schedule
        run: |
          # Define Statement ID
          STATEMENT_ID="${{ env.EVENTBRIDGE_RULE_NAME }}-Invoke"

          # Get Lambda ARN (Needed for both targets and permissions)
          LAMBDA_ARN=$(aws lambda get-function \
            --function-name "${{ env.LAMBDA_FUNCTION_NAME }}" \
            --query 'Configuration.FunctionArn' \
            --region "${{ env.AWS_REGION }}" \
            --output text)
          if [ -z "$LAMBDA_ARN" ]; then
            echo "Error: Failed to retrieve Lambda ARN."
            exit 1
          fi
          echo "Lambda ARN: $LAMBDA_ARN"

          # Get EventBridge Rule ARN (Needed for permission source)
          RULE_ARN="arn:aws:events:${{ env.AWS_REGION }}:918346807626:rule/${{ env.EVENTBRIDGE_RULE_NAME }}"
          echo "Rule ARN: $RULE_ARN"

          # 1. Create/Update the EventBridge Rule (put-rule is idempotent)
          echo "Creating/Updating EventBridge rule: ${{ env.EVENTBRIDGE_RULE_NAME }}"
          aws events put-rule \
            --name "${{ env.EVENTBRIDGE_RULE_NAME }}" \
            --schedule-expression "${{ env.SCHEDULE_CRON }}" \
            --state ENABLED \
            --region "${{ env.AWS_REGION }}"

          # 2. Attempt to add Lambda permission, capture output/error AND exit status reliably
          echo "Attempting to add permission with Statement ID ${STATEMENT_ID}..."
          # Run command, capture output/error to a variable, and *separately* capture exit status
          ADD_PERM_OUTPUT=$(aws lambda add-permission \
            --function-name "${{ env.LAMBDA_FUNCTION_NAME }}" \
            --statement-id "${STATEMENT_ID}" \
            --action "lambda:InvokeFunction" \
            --principal events.amazonaws.com \
            --source-arn "${RULE_ARN}" \
            --region "${{ env.AWS_REGION }}" 2>&1)
          ADD_PERM_EXIT_STATUS=$? # Capture exit status *immediately* after the command

          # Debugging: Print status and output regardless of success/failure
          echo "add-permission exit status: $ADD_PERM_EXIT_STATUS"
          echo "add-permission output/error: $ADD_PERM_OUTPUT"

          # 3. Check if the command failed (non-zero exit status)
          if [ $ADD_PERM_EXIT_STATUS -ne 0 ]; then
            # If it failed, check if the error was the expected ResourceConflictException
            # Use grep on the captured output variable
            if echo "$ADD_PERM_OUTPUT" | grep -q "ResourceConflictException.*The statement id.*provided already exists"; then
              echo "Permission with Statement ID ${STATEMENT_ID} already exists (ResourceConflictException caught). Treating as success."
            else
              # If it failed for any other reason, print the captured error and exit
              echo "Error: aws lambda add-permission failed unexpectedly."
              # Output was already printed above for debugging
              exit 1 # Explicitly fail the step
            fi
          else
            # If the command succeeded (exit status 0)
            echo "Permission added successfully."
          fi

          # 4. Set the Lambda Function as the Target of the Rule (put-targets is idempotent)
          echo "Setting Lambda function as target for rule: ${{ env.EVENTBRIDGE_RULE_NAME }}"
          aws events put-targets \
            --rule "${{ env.EVENTBRIDGE_RULE_NAME }}" \
            --targets "Id=1,Arn=${LAMBDA_ARN}" \
            --region "${{ env.AWS_REGION }}"

          echo "EventBridge schedule configured successfully."