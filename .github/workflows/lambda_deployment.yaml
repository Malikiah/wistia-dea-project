name: Deploy Wistia Extractor Lambda

on:
  push:
    branches:
      - main  # Trigger workflow on push to the main branch

env:
  LAMBDA_FUNCTION_NAME: wistia-api-pull
  AWS_REGION: us-east-1 # Change this to your desired AWS region
  S3_DEPLOYMENT_BUCKET: wistia-dea-project # S3 bucket for package staging
  AWS_ROLE: arn:aws:iam::918346807626:role/github-actions-lambda

  LAMBDA_EXECUTION_ROLE: arn:aws:iam::918346807626:role/service-role/wisita-api-pull-role-ympahjkx # <-- You must provide the ARN of the Lambda Execution Role here
  LAMBDA_HANDLER: lambda_function.lambda_handler
  LAMBDA_RUNTIME: python3.9
  LAMBDA_TIMEOUT: 30
  LAMBDA_MEMORY: 128
jobs:
  deploy:
    runs-on: ubuntu-latest
    permissions:
      id-token: write  # Required to request an OIDC token
      contents: read   # Required for actions/checkout
    steps:
      - name: Checkout repository code
        uses: actions/checkout@v4

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{env.AWS_ROLE}}
          aws-region: ${{ env.AWS_REGION }}

      # 2. Setup Python Environment
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.9' # Ensure this matches your Lambda runtime

      - name: Make package script executable
        run: chmod +x .github/scripts/create_package.sh
      - name: Execute packaging script
        run: ./.github/scripts/create_package.sh

      # 4. Upload Package to S3 (Staging)
      - name: Upload deployment package to S3
        run: |
          aws s3 cp wistia_lambda_package.zip s3://${{ env.S3_DEPLOYMENT_BUCKET }}/wistia_lambda_package.zip

      # 5. Deploy to AWS Lambda
      - name: Deploy Lambda function (Using S3 Artifact)
        run: |
          # Use a subshell method to reliably get the exit code without shell termination.
          # The result of this subshell will be 0 if the function is found, 1 if not.
          FUNCTION_EXISTS=$(aws lambda get-function \
            --function-name ${{ env.LAMBDA_FUNCTION_NAME }} \
            --region ${{ env.AWS_REGION }} > /dev/null 2>&1 && echo 0 || echo 1)

          if [ "${FUNCTION_EXISTS}" -eq 0 ]; then
            echo "Function ${{ env.LAMBDA_FUNCTION_NAME }} exists. Running update..."
            
            # --- UPDATE FUNCTION CODE & CONFIGURATION ---
            # Update Code (pulls latest zip from S3)
            aws lambda update-function-code \
              --function-name ${{ env.LAMBDA_FUNCTION_NAME }} \
              --s3-bucket ${{ env.S3_DEPLOYMENT_BUCKET }} \
              --s3-key wistia_lambda_package.zip \
              --region ${{ env.AWS_REGION }}

            # *** CRITICAL FIX: WAIT FOR CODE UPDATE TO COMPLETE ***
            echo "Waiting for code update to complete before modifying configuration..."
            aws lambda wait function-updated \
              --function-name ${{ env.LAMBDA_FUNCTION_NAME }} \
              --region ${{ env.AWS_REGION }}

            # Update Configuration (important if runtime, memory, or role changes)
            aws lambda update-function-configuration \
              --function-name ${{ env.LAMBDA_FUNCTION_NAME }} \
              --runtime ${{ env.LAMBDA_RUNTIME }} \
              --role ${{ env.LAMBDA_EXECUTION_ROLE }} \
              --handler ${{ env.LAMBDA_HANDLER }} \
              --timeout ${{ env.LAMBDA_TIMEOUT }} \
              --memory-size ${{ env.LAMBDA_MEMORY }} \
              --region ${{ env.AWS_REGION }}
            
          else
            echo "Function ${{ env.LAMBDA_FUNCTION_NAME }} does not exist. Running create..."
            
            # --- CREATE FUNCTION ---
            # This path inherently does not have a conflict issue, as it's the first operation.
            aws lambda create-function \
              --function-name ${{ env.LAMBDA_FUNCTION_NAME }} \
              --runtime ${{ env.LAMBDA_RUNTIME }} \
              --role ${{ env.LAMBDA_EXECUTION_ROLE }} \
              --handler ${{ env.LAMBDA_HANDLER }} \
              --timeout ${{ env.LAMBDA_TIMEOUT }} \
              --memory-size ${{ env.LAMBDA_MEMORY }} \
              --code S3Bucket=${{ env.S3_DEPLOYMENT_BUCKET }},S3Key=wistia_lambda_package.zip \
              --region ${{ env.AWS_REGION }}
          fi